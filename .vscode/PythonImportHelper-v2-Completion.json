[
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "21_23__10.close_a_b",
        "description": "21_23__10.close_a_b",
        "peekOfCode": "a = 1\nb = 1\nans_a = -1\nans_b = -1\nans = 1000\nwhile a<=1000 and b <= 1000:\n    if ans > abs(pow(2, a)-pow(10,b))/pow(10,b)*100:\n        ans = abs(pow(2, a)-pow(10,b))/pow(10,b)*100\n        ans_a = a\n        ans_b = b",
        "detail": "21_23__10.close_a_b",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "21_23__10.close_a_b",
        "description": "21_23__10.close_a_b",
        "peekOfCode": "b = 1\nans_a = -1\nans_b = -1\nans = 1000\nwhile a<=1000 and b <= 1000:\n    if ans > abs(pow(2, a)-pow(10,b))/pow(10,b)*100:\n        ans = abs(pow(2, a)-pow(10,b))/pow(10,b)*100\n        ans_a = a\n        ans_b = b\n    if pow(2,a) < pow(10,b):",
        "detail": "21_23__10.close_a_b",
        "documentation": {}
    },
    {
        "label": "ans_a",
        "kind": 5,
        "importPath": "21_23__10.close_a_b",
        "description": "21_23__10.close_a_b",
        "peekOfCode": "ans_a = -1\nans_b = -1\nans = 1000\nwhile a<=1000 and b <= 1000:\n    if ans > abs(pow(2, a)-pow(10,b))/pow(10,b)*100:\n        ans = abs(pow(2, a)-pow(10,b))/pow(10,b)*100\n        ans_a = a\n        ans_b = b\n    if pow(2,a) < pow(10,b):\n        a += 1",
        "detail": "21_23__10.close_a_b",
        "documentation": {}
    },
    {
        "label": "ans_b",
        "kind": 5,
        "importPath": "21_23__10.close_a_b",
        "description": "21_23__10.close_a_b",
        "peekOfCode": "ans_b = -1\nans = 1000\nwhile a<=1000 and b <= 1000:\n    if ans > abs(pow(2, a)-pow(10,b))/pow(10,b)*100:\n        ans = abs(pow(2, a)-pow(10,b))/pow(10,b)*100\n        ans_a = a\n        ans_b = b\n    if pow(2,a) < pow(10,b):\n        a += 1\n    else:",
        "detail": "21_23__10.close_a_b",
        "documentation": {}
    },
    {
        "label": "ans",
        "kind": 5,
        "importPath": "21_23__10.close_a_b",
        "description": "21_23__10.close_a_b",
        "peekOfCode": "ans = 1000\nwhile a<=1000 and b <= 1000:\n    if ans > abs(pow(2, a)-pow(10,b))/pow(10,b)*100:\n        ans = abs(pow(2, a)-pow(10,b))/pow(10,b)*100\n        ans_a = a\n        ans_b = b\n    if pow(2,a) < pow(10,b):\n        a += 1\n    else:\n        b += 1",
        "detail": "21_23__10.close_a_b",
        "documentation": {}
    },
    {
        "label": "ar",
        "kind": 5,
        "importPath": "21_23__10.mode_sort_array",
        "description": "21_23__10.mode_sort_array",
        "peekOfCode": "ar = [1,1,1,2,2,2,2,3,4,5,5,5]\nar.sort()\ncount = 1\nmax_count = 0\nli = []\ncurrent_val = ar[0]\nfor i in range(1, len(ar)):\n    if ar[i] == ar[i-1]:\n        count += 1\n    if count > max_count:",
        "detail": "21_23__10.mode_sort_array",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "21_23__10.mode_sort_array",
        "description": "21_23__10.mode_sort_array",
        "peekOfCode": "count = 1\nmax_count = 0\nli = []\ncurrent_val = ar[0]\nfor i in range(1, len(ar)):\n    if ar[i] == ar[i-1]:\n        count += 1\n    if count > max_count:\n        max_count = count\n        li = [ar[i]]",
        "detail": "21_23__10.mode_sort_array",
        "documentation": {}
    },
    {
        "label": "max_count",
        "kind": 5,
        "importPath": "21_23__10.mode_sort_array",
        "description": "21_23__10.mode_sort_array",
        "peekOfCode": "max_count = 0\nli = []\ncurrent_val = ar[0]\nfor i in range(1, len(ar)):\n    if ar[i] == ar[i-1]:\n        count += 1\n    if count > max_count:\n        max_count = count\n        li = [ar[i]]\n    elif count == max_count:",
        "detail": "21_23__10.mode_sort_array",
        "documentation": {}
    },
    {
        "label": "li",
        "kind": 5,
        "importPath": "21_23__10.mode_sort_array",
        "description": "21_23__10.mode_sort_array",
        "peekOfCode": "li = []\ncurrent_val = ar[0]\nfor i in range(1, len(ar)):\n    if ar[i] == ar[i-1]:\n        count += 1\n    if count > max_count:\n        max_count = count\n        li = [ar[i]]\n    elif count == max_count:\n        li.append(ar[i-1])",
        "detail": "21_23__10.mode_sort_array",
        "documentation": {}
    },
    {
        "label": "current_val",
        "kind": 5,
        "importPath": "21_23__10.mode_sort_array",
        "description": "21_23__10.mode_sort_array",
        "peekOfCode": "current_val = ar[0]\nfor i in range(1, len(ar)):\n    if ar[i] == ar[i-1]:\n        count += 1\n    if count > max_count:\n        max_count = count\n        li = [ar[i]]\n    elif count == max_count:\n        li.append(ar[i-1])\n    if ar[i] != ar[i-1]:",
        "detail": "21_23__10.mode_sort_array",
        "documentation": {}
    },
    {
        "label": "arrayManipulation",
        "kind": 2,
        "importPath": "python.array_manipulation",
        "description": "python.array_manipulation",
        "peekOfCode": "def arrayManipulation(n, queries):\n    # Write your code here\n    arr = [0 for _ in range(n+1)]\n    for q in queries:\n        a,b,k = q[0],q[1],q[2]\n        print(a,' ',b,' ',k)\n        arr[a-1] += k\n        if b < n:\n            arr[b] -= k\n    mx = arr[0]",
        "detail": "python.array_manipulation",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python.postfix_to_original",
        "description": "python.postfix_to_original",
        "peekOfCode": "arr = [10,8,5,2,1]\ncur = arr[-1]\nfor i in range(len(arr)-2,-1,-1):\n    t = arr[i]-cur\n    cur = arr[i]\n    arr[i] = t\nprint(arr)",
        "detail": "python.postfix_to_original",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "python.postfix_to_original",
        "description": "python.postfix_to_original",
        "peekOfCode": "cur = arr[-1]\nfor i in range(len(arr)-2,-1,-1):\n    t = arr[i]-cur\n    cur = arr[i]\n    arr[i] = t\nprint(arr)",
        "detail": "python.postfix_to_original",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python.prefix_to_original",
        "description": "python.prefix_to_original",
        "peekOfCode": "arr = [0, 1, 3, 6, 10, 15]\nif __name__ == \"__main__\":\n    cur = arr[0]\n    for i in range(1,len(arr)):\n        t = arr[i]-cur\n        cur = arr[i]\n        arr[i] = t\n    print(arr)",
        "detail": "python.prefix_to_original",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python.sample",
        "description": "python.sample",
        "peekOfCode": "def main():\n    ar = [1,2,3,4,5]\n    i = 0\n    while i < len(ar)-1:\n        if ar[i] != ar[i+1]:\n            flag = ar[i] < ar[i+1]\n            break\n        i += 1\n    while i < len(ar)-1:\n        if ar[i] != ar[i+1] and flag != (ar[i] < ar[i+1]):",
        "detail": "python.sample",
        "documentation": {}
    }
]